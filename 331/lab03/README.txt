Task 1 - Hailstone sequence:

Please follow the recommended register use conventions from slide 14 of the Harris lecture notes, e.g. arguments are passed in $4-$7, return values are in $2-$3, the stack pointer uses $29, and have the stack grow from an initial address of 0x7FFFEFFC.

The hailstone sequence starting at a positive integer n is generated by following two simple rules. If n is even, the next number in the sequence is n/2 . If n is odd, the next number in the sequence is 3*n+1 . Repeating this process generates the hailstone sequence. Write a recursive function hailstone(n) in MIPS Assembly which writes the hailstone sequence beginning at a given parameter n to Memory addresses starting at 0x00000100 . Let the recursion stop when the sequence reaches the number 1 (since otherwise, the code would loop forever 1, 4, 2, 1, 4, 2, ...). For example, when n=5 , your program should store the following sequence:

M[0x10010000] = 5
M[0x10010004] = 16
M[0x10010008] = 8
M[0x1001000C] = 4
M[0x10010010] = 2
M[0x10010014] = 1

HINTS:
	n/2 can be implemented by a 1 bit right shift
	2*n can be computed by a 1 bit left shift
	3*n can be computed as 2*n+n
	A binary number is odd if the least significant bit (LSB) is 1
	The LSB of a register can be checked by ANDing it
	with 0x00000001 and comparing the result to 0x00000000

Task 2 - Binary multiplication:

Write a function in MIPS Assembly that returns the product of two registers (assume that only the lower 16 bits of each register can be non-zero). Use the formula: <A[31:0]> * <B[31:0]> = SUM i=015 ( <A[31:0]> * B[i] * 2 i ). Iteratively compute this sum by starting with i=0, keeping the value <A[31:0]> * 2 i in a register. In the next iteration <A[31:0]> * 2 i+1 = <A[31:0]> * 2 i * 2 can be computed by a 1 bit left shift from <A[31:0]> * 2 i . Depending on B[i] being 1 or 0, <A[31:0]> * 2 i needs to be added to the iterative sum or not.

Task 3 - Bitmap Display:

1. Load the assembly program “RectangleOnBitmapDisplay.asm” into MARS and assemble it.
2. Start the “Bitmap Display Tool” from the “Tools”- Menu and configure Unit width and height to 8 pixels and Display width and height to 256 pixels.
3. Connect the Display to MIPS using the “Connect to MIPS” button.
4. Execute the program
5. Edit the program and rerun it to draw two white rectangles on the screen (reset screen before your run).
6. Edit the program and rerun it to draw a red and a green rectangle on the screen (reset screen before your run).
7. Edit the program and rerun it to draw squares (width and height 10) at random locations on the screen (use system call 42 to generate random numbers between 0 and 21) with random colors (the last 24 bit of the written value defines the pixel color in bits [23:16] red, [15:8] green, and [7:0] blue) – use system call 41 to generate random numbers to pick the square colors.
