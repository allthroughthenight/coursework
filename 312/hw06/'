;--------------------------------------------------------
;
;	hw: 5
;
;	class: 312
;
;	file: hw5_ex4.asm
;
;	description: take user input and print out histograms by distribution
;
;--------------------------------------------------------

%include "asm_io.inc"

segment .data
	msg1	db	"Enter an integer: ",0
	msg2	db	"Binary representation: ", 0
	msg3	db	"String representation: ", 0
	msg4	db	"Pattern DBB occurs this many times: ",0
	msg5	db	"Enter a 2-character pattern: ",0
	msg6	db	"Your pattern occurs this many times: ",0
	msg7	db	"Enter a pattern with at most 16 characters: ",0
	msg8	db	"Your pattern occurs this many times: ",0
	msg9	db	"Pattern B* occurs this many times: ", 0

segment	.bss
; no more than 20 bytes can be reserved
	input_int	resb	1	; size of bins

segment .text
	global asm_main

asm_main:
	; set up
	enter	0,0
	pusha
_start:

	;
	; ex1: print binary string of input
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	mov	eax, msg1
	call	print_string
	call	read_int
	mov	[input_int], eax 	; store input int

	mov	eax, msg2
	call	print_string

	; print binary representation of user input
	mov	eax, [input_int]		; mov input int to eax
	mov	ecx, 32				; load counter for loop

	; loop 32 time
print_input_bin:
	shl	eax, 1				; shift register left by one
	jc	print_one			; if carry flag is set jump i.e. last bit shifted out is one
	call	print_zero			; call print zero
	jmp	after_print_one		; skip print one call
print_one:					; print one call label
	call	print_one			; call print one
call_print_one:				; after print one label
	loop	print_input_bin			; print input loop label

	jmp after_print_one			; jump to after print one sub program
; print the number 1
print_one:
	pusha					; save registers
	mov	eax, 1				; load eax
	call	print_int			; print eax
	popa					; restore register
	ret					; return
after_print_one:				; after sub program jump

	jmp	after_print_zero		; jump to after print zero sub program
; print the number zero
print_zero:
	pusha					; save registers
	mov	eax, 0				; load eax
	call	print_int			; print eax
	popa					; restore register
	ret					; return
after_print_zero:

	call	print_nl

	;
	; ex2: print encoded string
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	; convert binary to characters
	; read input as int
	; cmp input with 65
	; if zero, print a
	; if one, print b
	; if three, print c
	; if four, print d

	mov	eax, msg3
	call	print_string

	; print characters

	call	print_nl

	;
	; ex3: find the DBB pattern
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	; check for DBB pattern

	mov	eax, msg4
	call	print_string

	; print number of times DBB pattern occurs

	call	print_nl

	;
	; ex4: find the DBB pattern
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	mov	eax, msg5
	call	print_string

	; take user input, check hw05 solution

	call print_nl

	; check for input pattern

	mov	eax, msg6
	call	print_string

	; print number of times input pattern occurs

	call print_nl

	;
	; ex5: find an abritrary pattern
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	mov	eax, msg7
	call	print_string

	; read user input
	; check for input patter

	call print_nl

	mov	eax, msg8
	call	print_string

	; print number of times input patter occurs

end:
	; clean up
	popa
	mov	eax, 0
	leave
	ret

